<?php
//config
$moduleName = ucfirst(sfInflector::camelize($this->getModuleName()));
$panelName = "Edit".$moduleName."Panel";
$panelName_xtype = strtolower("Edit".$this->getModuleName()."Panel");

//included panels
//$headerPanelName = "Edit".$moduleName."HeaderPanel";
$westPanelName = "Edit".$moduleName."WestPanel";
$formName = "Edit".$moduleName."FormPanel";
$formName_xtype = strtolower("Edit".$this->getModuleName()."FormPanel");

$pkn = $this->getPrimaryKeyAdminColumn()->getName();
?>
[?php
  use_helper('I18N', 'Date');
  $sfExtjs2Plugin = new sfExtjs2Plugin();

  $editpanel = new stdClass();
  $editpanel->attributes = array();
  $editpanel->methods    = array();

?]
<?php $panels = $this->getParameterValue('edit.panels', array()); ?>
<?php foreach($panels as $xtype => $panel_config): ?>
<?php if (isset($panel_config['partial'])) : ?>
[?php include_partial('<?php echo $panel_config['partial'] ?>',     array('sfExtjs2Plugin' => $sfExtjs2Plugin)) ?]
<?php endif ?>
<?php endforeach ?>

[?php include_partial('edit_form',     array('sfExtjs2Plugin' => $sfExtjs2Plugin)) ?]
[?php

$sfExtjs2_EditModule_items = array(
<?php foreach($panels as $xtype => $panel_config): ?>
  $sfExtjs2Plugin->asAnonymousClass(array(
    'xtype'     => '<?php echo $xtype ?>',
    'basePanel' => $sfExtjs2Plugin->asVar('this'),
    'baseUrl'   => $this->getContext()->getRequest()->getScriptName(),
<?php foreach($panel_config['config'] as $key => $value): ?>
    '<?php echo $key ?>' => '<?php echo $value ?>',
<?php endforeach ?>
  )),
<?php endforeach ?>

  $sfExtjs2Plugin->asAnonymousClass(array(
    'xtype'     => '<?php echo $this->getParameterValue('edit.content_xtype', 'panel');  ?>',
    'region'    => 'center',

<?php $panel_config = $this->getParameterValue('edit.content_config', array()) ?>
<?php foreach($panel_config as $key => $value): ?>
    '<?php echo $key ?>' => '<?php echo $value ?>',
<?php endforeach ?>


    'items' => array(
      $sfExtjs2Plugin->asAnonymousClass(array(
        'xtype'     => '<?php echo strtolower($formName_xtype)  ?>',
//        'headerAsText'  => false,
        'key'       => $sfExtjs2Plugin->asVar('this.key'),
      )),
    )

  ))

);

<?php $objectName = $this->getParameterValue('object_name', $this->getModuleName()) ?>
$config = $sfExtjs2Plugin->asAnonymousClass(array(
  'layout'              => 'border',
  'autoScroll'          => false,
  'border'              => false,
//  'autoHeight'          => true,
//  'height'          => 300,

  'title'               => <?php echo $this->getI18NString('edit.newtitle', 'Add '.$objectName, false) ?>,
  'header'              => true, //TODO:  make this a config option

  'defaults'            => array('border' => false),

  'items'               => $sfExtjs2_EditModule_items,
));

?]

[?php

// constructor
$editpanel->methods['constructor'] = $sfExtjs2Plugin->asMethod(array(
  'parameters' => 'c',
  'source'     => "
    // combine <?php echo $panelName ?>Config with arguments
    Ext.app.sx.<?php echo $panelName ?>.superclass.constructor.call(this, c);
  "
));

// initComponent
$editpanel->methods['initComponent'] = $sfExtjs2Plugin->asMethod("
  Ext.apply(this, this.initialConfig, ".$config.");
  //call parent
  Ext.app.sx.<?php echo $panelName ?>.superclass.initComponent.apply(this, arguments);

  this.addEvents(
    /**
     * @event load_item_success
     * Fires when the item is loaded successfully
     * @param {Ext.app.sx.<?php echo $formName ?>} this Edit-FormPanel
     */
    'load_item_success',
    /**
     * @event saved
     * Fires when the item is saved successfully
     * @param {Ext.app.sx.<?php echo $panelName ?>} this Edit-Panel
     */
    'saved',
    /**
     * @event deleted
     * Fires when the item is deleted successfully
     * @param {Ext.app.sx.<?php echo $panelName ?>} this Edit-Panel
     */
    'deleted',
    /**
     * @event close_request
     * Fires when the panel request to close itself (it cannot do this itself, the window/tabpabel should do this)
     * @param {Ext.app.sx.<?php echo $panelName ?>} this Edit-Panel
     */
    'close_request',
    /**
     * @event keychange
     * Fires when the items (primary) key has been set (after saving a new item)
     * @param number key
     * @param number oldkey
     * @param {Ext.app.sx.<?php echo $formName ?>} this Edit-FormPanel
     */
     'keychange'
  );

  //get a reference to the content-panel with the form
  this.contentPanel = this.items.find(function(i){return i.region === 'center';});
  // test if this item is a container for sub-items, set first sub-item as contentPanel
  if (typeof this.contentPanel.getItem != 'undefined') {
    this.containerPanel = this.contentPanel;
    this.contentPanel = this.contentPanel.getItem(0);
  }

");

// initEvents
$editpanel->methods['initEvents'] = $sfExtjs2Plugin->asMethod("
  //call parent
  Ext.app.sx.<?php echo $panelName ?>.superclass.initEvents.apply(this);

  this.contentPanel.on({
    'load_item_success' : {
      fn:     this.loadItemSuccess,
      scope:  this
    },
    'titlechange' : {
      fn:     this.setTitleHandler,
      scope:  this
    },
    'keychange': {
      fn:   this.keyChangedHandler,
      scope: this
    },
    'close_request': {
      fn:   this.closeRequest,
      scope: this
    },
    'saved': {
      fn:   this.savedHandler,
      scope: this
    },
    'deleted': {
      fn:   this.deletedHandler,
      scope: this
    }
  });
");

// onRender
$editpanel->methods['onRender'] = $sfExtjs2Plugin->asMethod("
  Ext.app.sx.<?php echo $panelName ?>.superclass.onRender.apply(this, arguments);
");

$editpanel->methods['getModulename'] = $sfExtjs2Plugin->asMethod("
  return this.contentPanel.getModulename();
");

$editpanel->methods['getPanelType'] = $sfExtjs2Plugin->asMethod("
  return this.contentPanel.getPanelType();
");

$editpanel->methods['isNew'] = $sfExtjs2Plugin->asMethod("
  var new_item = true;

  if (typeof this.contentPanel != 'undefined'){
    new_item = this.contentPanel.isNew();
  }

  return new_item;
");

$editpanel->methods['loadItemSuccess'] = $sfExtjs2Plugin->asMethod("
  //throw load (item) succes
  this.fireEvent('load_item_success', this);
");

$editpanel->methods['getKey'] = $sfExtjs2Plugin->asMethod("
  return this.contentPanel.getKey();
");

// loadItem
$editpanel->methods['loadItem'] = $sfExtjs2Plugin->asMethod("
  // TODO: fix this to make direct loading from url possible (probably call this method only after rendering) OR IT MISSES SOME INFO (master-detail, has detail-key, but not master-key)
  if (typeof this.contentPanel.loadItem != 'undefined') {
    this.contentPanel.loadItem();
  }
");

// setTitleHandler
$editpanel->methods['setTitleHandler'] = $sfExtjs2Plugin->asMethod(array(
  'parameters'  => 'p, title',
  'source'      => "
    this.setTitle(title);
  "
));

// keyChangedHandler
$editpanel->methods['keyChangedHandler'] = $sfExtjs2Plugin->asMethod(array(
  'parameters'  => 'key, old_key, formPanel',
  'source'      => "
    var old_key = this.key;
    this.key = key;

    this.fireEvent('keychange', this.key, old_key, this);
  "
));

// savedHandler
$editpanel->methods['savedHandler'] = $sfExtjs2Plugin->asMethod("
  this.fireEvent('saved', this);
");

// deletedHandler
$editpanel->methods['deletedHandler'] = $sfExtjs2Plugin->asMethod("
  this.fireEvent('deleted', this);
");

// closeRequest
$editpanel->methods['closeRequest'] = $sfExtjs2Plugin->asMethod("
  this.fireEvent('close_request', this);
");

// app.sx from Symfony eXtended (instead of ux: user eXtention)
$sfExtjs2Plugin->beginClass(
  'Ext.app.sx',
  '<?php echo $panelName ?>',
  'Ext.Panel',
  array_merge(
    $editpanel->methods,
    $editpanel->attributes
  )
);
$sfExtjs2Plugin->endClass();

?]
// register xtype
Ext.reg('<?php echo strtolower($panelName_xtype) ?>', Ext.app.sx.<?php echo $panelName ?>);
